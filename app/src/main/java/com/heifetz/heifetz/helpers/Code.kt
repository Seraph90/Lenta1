package com.heifetz.heifetz.helpers

const val START = "00011010011100"
const val STOP = "1100011101011000"

val map: HashMap<String, String> = hashMapOf(
    "00" to "11011001100",
    "01" to "11001101100",
    "02" to "11001100110",
    "03" to "10010011000",
    "04" to "10010001100",
    "05" to "10001001100",
    "06" to "10011001000",
    "07" to "10011000100",
    "08" to "10001100100",
    "09" to "11001001000",
    "10" to "11001000100",
    "11" to "11000100100",
    "12" to "10110011100",
    "13" to "10011011100",
    "14" to "10011001110",
    "15" to "10111001100",
    "16" to "10011101100",
    "17" to "10011100110",
    "18" to "11001110010",
    "19" to "11001011100",
    "20" to "11001001110",
    "21" to "11011100100",
    "22" to "11001110100",
    "23" to "11101101110",
    "24" to "11101001100",
    "25" to "11100101100",
    "26" to "11100100110",
    "27" to "11101100100",
    "28" to "11100110100",
    "29" to "11100110010",
    "30" to "11011011000",
    "31" to "11011000110",
    "32" to "11000110110",
    "33" to "10100011000",
    "34" to "10001011000",
    "35" to "10001000110",
    "36" to "10110001000",
    "37" to "10001101000",
    "38" to "10001100010",
    "39" to "11010001000",
    "40" to "11000101000",
    "41" to "11000100010",
    "42" to "10110111000",
    "43" to "10110001110",
    "44" to "10001101110",
    "45" to "10111011000",
    "46" to "10111000110",
    "47" to "10001110110",
    "48" to "11101110110",
    "49" to "11010001110",
    "50" to "11000101110",
    "51" to "11011101000",
    "52" to "11011100010",
    "53" to "11011101110",
    "54" to "11101011000",
    "55" to "11101000110",
    "56" to "11100010110",
    "57" to "11101101000",
    "58" to "11101100010",
    "59" to "11100011010",
    "60" to "11101111010",
    "61" to "11001000010",
    "62" to "11110001010",
    "63" to "10100110000",
    "64" to "10100001100",
    "65" to "10010110000",
    "66" to "10010000110",
    "67" to "10000101100",
    "68" to "10000100110",
    "69" to "10110010000",
    "70" to "10110000100",
    "71" to "10011010000",
    "72" to "10011000010",
    "73" to "10000110100",
    "74" to "10000110010",
    "75" to "11000010010",
    "76" to "11001010000",
    "77" to "11110111010",
    "78" to "11000010100",
    "79" to "10001111010",
    "80" to "10100111100",
    "81" to "10010111100",
    "82" to "10010011110",
    "83" to "10111100100",
    "84" to "10011110100",
    "85" to "10011110010",
    "86" to "11110100100",
    "87" to "11110010100",
    "88" to "11110010010",
    "89" to "11011011110",
    "90" to "11011110110",
    "91" to "11110110110",
    "92" to "10101111000",
    "93" to "10100011110",
    "94" to "10001011110",
    "95" to "10111101000",
    "96" to "10111100010",
    "97" to "11110101000",
    "98" to "11110100010",
    "99" to "10111011110"
)

fun generateCode(codeString: String): String {
    var result = START
    var number = ""
    var checkSum = 105
    var count = 1

    for (digit in codeString) {
        number += digit
        if (number.length == 2) {
            result += map[number]
            checkSum += count * number.toInt()
            number = ""
            count++
        }
    }
    result += map[(checkSum % 103).toString()]
    result += STOP

    return result
}
